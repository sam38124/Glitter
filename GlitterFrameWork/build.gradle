buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
    id "base"
    id "maven-publish"
}

apply plugin: 'com.jfrog.bintray'
def GROUP_ID = "com.jzLibrary" // Your orginization in reverse domain notation. For example:  def GROUP_ID="com.fudge"
def ARTIFACT_ID = "GlitterFrameWork" // The name you gave your package in bintray. In our example it would be:  def ARTIFACT_ID="kotlin-awesome-printer"
def BINTRAY_REPOSITORY = "KotlinLib" // What you named your repository in bintray. In our example it would be "myrepository"
def BINTRAY_ORGINIZATION = "sam38124" //  Your public facing Bintray name. You can see your Bintray name on the top right corner in Bintray. I named it "guide" for our example.

def ISSUE_URL = "https://github.com/sam38124/GlitterFrameWork" // A link to an issue tracker for the library, in our example: "https://github.com/natanfudge/KotlinAwesomePrinter/issues"
def SITE_URL = "https://github.com/sam38124/GlitterFrameWork" // A link to the library's site. In our example: "https://github.com/natanfudge/KotlinAwesomePrinter"
def VCS_URL = "https://github.com/sam38124/GlitterFrameWork.git" // A link to the version control system (where the code is stored). In our example: "https://github.com/natanfudge/KotlinAwesomePrinter.git"
def LIBRARY_VERSION_NAME = 1.0 // The current version of your library. You will need to update this value whenever you upload a new release. For example: 1.0
repositories {
    jcenter()
    mavenCentral()
}
group GROUP_ID
version LIBRARY_VERSION_NAME


kotlin {

    ios()
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64

    sourceSets {
        commonMain {
            dependencies {
                api('mysql:mysql-connector-java:5.1.46')
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                api('com.google.code.gson:gson:2.8.5')
                api('io.ktor:ktor-client-apache:1.3.2')
                api('io.ktor:ktor-client-core-jvm:1.3.2')
                api('io.ktor:ktor-client-core:1.3.2')
                api('io.ktor:ktor-html-builder:1.3.2')
                api('io.ktor:ktor-server-core:1.3.2')
                api('io.ktor:ktor-server-netty:1.3.2')
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                api('com.google.code.gson:gson:2.8.5')
                api('mysql:mysql-connector-java:5.1.46')
            }
        }
        jvmMain {
            dependencies {
                api('mysql:mysql-connector-java:5.1.46')
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                api('com.google.code.gson:gson:2.8.5')
                api('io.ktor:ktor-client-apache:1.3.2')
                api('io.ktor:ktor-client-core-jvm:1.3.2')
                api('io.ktor:ktor-client-core:1.3.2')
                api('io.ktor:ktor-html-builder:1.3.2')
                api('io.ktor:ktor-server-core:1.3.2')
                api('io.ktor:ktor-server-netty:1.3.2')
                implementation kotlin('stdlib-common')
            }
        }
        jvmTest {
            dependencies {
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                api('com.google.code.gson:gson:2.8.5')
                api('mysql:mysql-connector-java:5.1.46')
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                api('com.google.code.gson:gson:2.8.5')
                api('mysql:mysql-connector-java:5.1.46')
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                api('org.jetbrains.kotlin:kotlin-reflect:1.3.72')
                api('com.google.code.gson:gson:2.8.5')
                api('mysql:mysql-connector-java:5.1.46')
                implementation kotlin('test-js')
            }
        }
        mingwMain {
        }
        mingwTest {
        }
    }

}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

bintray {

    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
    // so I am gradle.properties writing locally.
    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
    // so if it is written in property in the home directory, it will be useful for other projects as well.
    user = 'sam38124'
    key = 'd6c8d91a2ee01801243351522596457ad08c2eb9'
    //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
    // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
    publish = false

    pkg {
        repo = BINTRAY_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
bintrayUpload.dependsOn publishToMavenLocal

